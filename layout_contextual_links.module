<?php
/**
 * @file
 * Main module file for Layout Contextual Links.
 *
*/

/**
 * Implements hook_menu().
 */
function layout_contextual_links_menu() {
$items['admin/config/development/layout_contextual_links'] = array(
    'title' => 'Layout contextual links',
    'description' => 'Configuration page for layout/theme contextual links.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_contextual_links_settings_form'),
    'file' => 'layout_contextual_links.admin.inc',
    'access arguments' => array('administer layout contextual links'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function layout_contextual_links_permission() {
  return array(
    'administer layout contextual links' => array(
      'title' => t('Administer layout contextual links'),
      'description' => t('Administer settings for layout contextual links.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function layout_contextual_links_init() {
  // Depending on the current page theme, add CSS that shifts the contextual
  // links downward based on whether we specified a shift for the given theme.
  if (path_is_admin(current_path())) {
    $shift = config_get('layout_contextual_links.settings', 'admin_theme_shift');
  }
  else {
    $shift = config_get('layout_contextual_links.settings', 'default_theme_shift');
  }
  if ($shift) {
    $css = '
      .admin-bar .contextual-links-region-layout > .contextual-links-wrapper {
        margin-top: 33px;
      }';
    backdrop_add_css($css, 'inline');
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function layout_contextual_links_preprocess_layout(&$variables) {
  // Wrap the output in contextual links via the renderer if applicable.
  if (user_access('access contextual links')) {
    $links = array();
    if (user_access('administer layouts')) {
      $query = array('destination' => current_path());
      if (config_get('layout_contextual_links.settings', 'layout_links')) {
        $layout = $variables['layout'];
        $name = $layout->name;
        $links[] = '<div class="info">' . t('Layout: %title', array('%title' => $layout->title)) . '</div>';
        $links[] = l(t('Manage blocks'), 'admin/structure/layouts/manage/' . $name, array('query' => $query));
        $links[] = l(t('Configure layout'), 'admin/structure/layouts/manage/' . $name . '/configure', array('query' => $query));
      }
      if (config_get('layout_contextual_links.settings', 'theme_links')) {
        global $theme_key;
        $themes = list_themes();
        $theme = $themes[$theme_key];
        $links[] = '<div class="info">' . t('Theme: %title', array('%title' => $theme->info['name'])) . '</div>';
        $links[] = l(t('Theme settings'), 'admin/appearance/settings/' . $theme_key, array('query' => $query));
      }
    }
    if (!empty($links)) {
      $variables['renderer']->prefix = '
        <div class="contextual-links-region contextual-links-region-layout">
          <div class="contextual-links-wrapper">
            <ul class="contextual-links">
              <li>' . implode('</li><li>', $links) . '</li>
            </ul>
          </div>' . $variables['renderer']->prefix;
      $variables['renderer']->suffix = $variables['renderer']->suffix . '</div>';
    }
  }
}

/**
 * Implements hook_config_info().
 */
function layout_contextual_links_config_info() {
  $prefixes['layout_contextual_links.settings'] = array(
    'label' => t('Layout Contextual Links settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

